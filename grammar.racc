class Scanner
  prechigh
    left '/' '*' REM
    left '+' '-'
    nonassoc ELSE
    nonassoc LOWER_THAN_ELSE
  preclow

    options no_result_var

    token IDENTIFIER
    token CONSTANTI
    token CONSTANTF
    token INC_OP DEC_OP LE_OP GE_OP EQ_OP NE_OP
    token SUB_ASSIGN MUL_ASSIGN ADD_ASSIGN DIV_ASSIGN
    token SHL_ASSIGN SHR_ASSIGN
    token REM_ASSIGN
    token REM SHL SHR
    token AND OR
    token TYPE_NAME
    token INT FLOAT DOUBLE VOID
    token IF ELSE WHILE RETURN FOR DO

    start program

  rule

    conditional_expression
    : logical_or_expression                             { val[0] }

    logical_or_expression
    : logical_and_expression                            { val[0] }
    | logical_or_expression OR logical_and_expression   { OrExpr.new(val[0], val[2]) }

    logical_and_expression
    : comparison_expression                             { val[0] }
    | logical_and_expression AND comparison_expression  { AndExpr.new(val[0], val[2]) }



    shift_expression
    : additive_expression                               { val[0] }
    | shift_expression SHL additive_expression          { ShiftLeftExpr.new(val[0], val[2]) }
    | shift_expression SHR additive_expression          { ShiftRightExpr.new(val[0], val[2]) }

    primary_expression
    : IDENTIFIER                                        { IdentifierExpr.new(val[0]) }
    | CONSTANTI                                         { ConstantIExpr.new(val[0]) }
    | CONSTANTF                                         { ConstantFExpr.new(val[0]) }
    | '(' expression ')'                                { val[1] }
    | IDENTIFIER '(' ')'                                { FunctionCallExpr.new(val[0]) }
    | IDENTIFIER '(' argument_expression_list ')'       { FunctionCallExpr.new(val[0], val[2]) }
    | IDENTIFIER '[' expression ']'                      { ArrayElementExpr.new(val[0], val[2]) }

    postfix_expression
    : primary_expression                                { val[0] }
    | postfix_expression INC_OP                         { PostIncExpr.new(val[0]) }
    | postfix_expression DEC_OP                         { PostDecExpr.new(val[0]) }

    argument_expression_list
    : expression                                        { [ val[0] ] }
    | argument_expression_list ',' expression           { val[0].push(val[2]) }

    unary_expression
    : postfix_expression                                { val[0] }
    | INC_OP unary_expression                           { IncExpr.new(val[1]) }
    | DEC_OP unary_expression                           { DecExpr.new(val[1]) }
    | '-' unary_expression                              { NegExpr.new(val[1]) }
    | '!' unary_expression                              { InvExpr.new(val[1]) }


    multiplicative_expression
    : unary_expression                                  { val[0] }
    | multiplicative_expression '*' unary_expression    { MulExpr.new(val[0], val[2]) }
    | multiplicative_expression '/' unary_expression    { DivExpr.new(val[0], val[2]) }
    | multiplicative_expression REM unary_expression    { RemExpr.new(val[0], val[2]) }

    additive_expression
    : multiplicative_expression                             { val[0] }
    | additive_expression '+' multiplicative_expression     { AddExpr.new(val[0], val[2]) }
    | additive_expression '-' multiplicative_expression     { SubExpr.new(val[0], val[2]) }

    comparison_expression
    : shift_expression                                  { val[0] }
    | comparison_expression '<' shift_expression        { LtExpr.new(val[0], val[2]) }
    | comparison_expression '>' shift_expression        { GtExpr.new(val[0], val[2]) }
    | comparison_expression LE_OP shift_expression      { LeExpr.new(val[0], val[2]) }
    | comparison_expression GE_OP shift_expression      { GeExpr.new(val[0], val[2]) }
    | comparison_expression EQ_OP shift_expression      { EqExpr.new(val[0], val[2]) }
    | comparison_expression NE_OP shift_expression      { NeExpr.new(val[0], val[2]) }

    expression
    : IDENTIFIER assignment_operator conditional_expression                   { AssignmentExprFactory.build(val[1], val[0], val[2]) }
    | IDENTIFIER '[' expression ']' assignment_operator conditional_expression { ArrayAssignmentExpr.new(val[0], val[2], val[4], val[5]) }
    | conditional_expression                                                  { val[0] }

    assignment_operator
    : '='                                               { :'=' }
    | MUL_ASSIGN                                        { :MUL_ASSIGN }
    | DIV_ASSIGN                                        { :DIV_ASSIGN }
    | REM_ASSIGN                                        { :REM_ASSIGN }
    | SHL_ASSIGN                                        { :SHL_ASSIGN }
    | SHR_ASSIGN                                        { :SHR_ASSIGN }
    | ADD_ASSIGN                                        { :ADD_ASSIGN }
    | SUB_ASSIGN                                        { :SUB_ASSIGN }

    declaration
    : type_name declarator_list ';'                     { DeclarationBuilder.new(val[0], val[1]) }
    | type_name declarator_list '=' expression ';'      { DeclarationBuilder.new(val[0], val[1], { mode: :expr, value: val[3] }) }

    declarator_list
    : IDENTIFIER                                        { [ val[0] ] }
    | IDENTIFIER '[' CONSTANTI ']'                      { [{id: val[0], size: val[2]}] }
    | declarator_list ',' IDENTIFIER                    { val[0].push(val[2]) }
    | declarator_list ',' IDENTIFIER '[' CONSTANTI ']'  { val[0].push({id: val[2], size: val[4]}) }
    #| declarator_list ',' IDENTIFIER '[' expression ']'  { val[0].push({id: val[2], size: val[4]}) }

    type_name
    : VOID                                              { :void }
    | INT                                               { :integer }
    | FLOAT                                             { :float }
    | DOUBLE                                            { :float }

    declarator
    : IDENTIFIER '(' parameter_list ')'                 { { id: val[0], args: val[2] } }
    | IDENTIFIER '(' ')'                                { { id: val[0] } }

    parameter_list
    : parameter_declaration                             { [ val[0] ] }
    | parameter_list ',' parameter_declaration          { val[0].push(val[2]) }

    parameter_declaration
    : type_name IDENTIFIER                              { { type: val[0], id: val[1] } }

    statement
    : declaration                                       { val[0].build_inner }
    | compound_statement                                { val[0] }
    | expression_statement                              { val[0] }
    | selection_statement                               { val[0] }
    | iteration_statement                               { val[0] }
    | jump_statement                                    { val[0] }

    compound_statement
    : '{' '}'                                           { CompoundStatement.new(Array.new) }
    | '{' statement_list '}'                            { CompoundStatement.new(val[1]) }

    statement_list
    : statement                                         { [val[0]] }
    | statement_list statement                          { val[0].push(val[1]) }

    expression_statement
    : ';'                                               { nil }
    | expression ';'                                    { val[0] }

    selection_statement
    : IF '(' expression ')' statement   =LOWER_THAN_ELSE                { IfStatement.new(val[2], val[4]) }
    | IF '(' expression ')' statement ELSE statement                    { IfStatement.new(val[2], val[4], val[6]) }
    | FOR '(' expression ';' expression ';' expression ')' statement    { ForStatement.new(val[2], val[4], val[6], val[8]) }
    | FOR '(' expression ';' expression ';'            ')' statement    { ForStatement.new(val[2], val[4], nil, val[7]) }
    | FOR '(' expression ';'            ';' expression ')' statement    { ForStatement.new(val[2], nil, val[5], val[7]) }
    | FOR '(' expression ';'            ';'            ')' statement    { ForStatement.new(val[2], nil, nil, val[6]) }
    | FOR '('            ';' expression ';' expression ')' statement    { ForStatement.new(nil, val[3], val[5], val[7]) }
    | FOR '('            ';' expression ';'            ')' statement    { ForStatement.new(nil, val[3], nil, val[6]) }
    | FOR '('            ';'            ';' expression ')' statement    { ForStatement.new(nil, nil, val[4], val[6]) }
    | FOR '('            ';'            ';'            ')' statement    { ForStatement.new(nil, nil, nil, val[5]) }

    iteration_statement
    : WHILE '(' expression ')' statement                { WhileStatement.new(val[2], val[4]) }
    | DO statement WHILE '(' expression ')' ';'         { DoWhileStatement.new(val[4], val[1]) }

    jump_statement
    : RETURN ';'                                        { Return.new }
    | RETURN expression ';'                             { Return.new(val[1]) }

    program
    : external_declaration_list                         { @scope.declaration_code + val[0].reduce('') do |acc, ext_decl|
                                                            acc + ext_decl.code(@scope).to_s
                                                          end }

    external_declaration_list
    : external_declaration                              { [val[0]] }
    | external_declaration_list external_declaration    { val[0].push(val[1]) }


    external_declaration
    : function_definition                               { val[0] }
    | declaration                                       { val[0].build_global }

    function_definition
    : type_name declarator compound_statement           { Function.new(val[0], val[1], val[2]) }
end

---- header ----

require_relative 'scanner.rex'
require_relative '../core/core'

---- inner ----

attr_reader :scope

def initialize
    @scope = GlobalScope.new(IdentifierTable.new)
end

def on_error(t, val, vstack)
    puts "Error: unexpected token (at line #{lineno}): #{val} [#{token_to_str(t)}]"
end

---- footer ----

Main.new(Scanner.new).launch
